default namespace = ""
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2015-02-23T09:44:29Z. .
# TEI Edition: Version 2.7.0. Last updated on
#	16th September 2014, revision 13036
# TEI Edition Location: http://www.tei-c.org/Vault/P5/Version 2.7.0/
#

# CC-BY

sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
data.word = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
att.citing.attributes =
  att.citing.attribute.unit,
  att.citing.attribute.from,
  att.citing.attribute.to
att.citing.attribute.unit =
  
  ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume.
  ## Suggested values include: 1] volume; 2] issue; 3] page; 4] line; 5] chapter; 6] part; 7] column
  attribute unit {
    
    ## the element contains a volume number.
    "volume"
    | 
      ## the element contains an issue number, or volume and issue numbers.
      "issue"
    | 
      ## the element contains a page number or page range.
      "page"
    | 
      ## the element contains a line number or line range.
      "line"
    | 
      ## the element contains a chapter indication (number and/or title)
      "chapter"
    | 
      ## the element identifies a part of a book or collection.
      "part"
    | 
      ## the element identifies a column.
      "column"
    | xsd:Name
  }?
att.citing.attribute.from =
  
  ## specifies the starting point of the range of units indicated by the unit attribute.
  attribute from { data.word }?
att.citing.attribute.to =
  
  ## specifies the end-point of the range of units indicated by the unit attribute.
  attribute to { data.word }?
model.nameLike.agent = notAllowed
model.nameLike.agent_alternation = notAllowed
model.nameLike.agent_sequence = empty
model.nameLike.agent_sequenceOptional = empty
model.nameLike.agent_sequenceOptionalRepeatable = empty
model.nameLike.agent_sequenceRepeatable = notAllowed
model.hiLike = notAllowed
model.hiLike_alternation = notAllowed
model.hiLike_sequence = empty
model.hiLike_sequenceOptional = empty
model.hiLike_sequenceOptionalRepeatable = empty
model.hiLike_sequenceRepeatable = notAllowed
model.emphLike = notAllowed
model.emphLike_alternation = notAllowed
model.emphLike_sequence = empty
model.emphLike_sequenceOptional = empty
model.emphLike_sequenceOptionalRepeatable = empty
model.emphLike_sequenceRepeatable = notAllowed
model.dateLike = notAllowed
model.dateLike_alternation = notAllowed
model.dateLike_sequence = empty
model.dateLike_sequenceOptional = empty
model.dateLike_sequenceOptionalRepeatable = empty
model.dateLike_sequenceRepeatable = notAllowed
model.measureLike = notAllowed
model.measureLike_alternation = notAllowed
model.measureLike_sequence = empty
model.measureLike_sequenceOptional = empty
model.measureLike_sequenceOptionalRepeatable = empty
model.measureLike_sequenceRepeatable = notAllowed
model.offsetLike = notAllowed
model.offsetLike_alternation = notAllowed
model.offsetLike_sequence = empty
model.offsetLike_sequenceOptional = empty
model.offsetLike_sequenceOptionalRepeatable = empty
model.offsetLike_sequenceRepeatable = notAllowed
model.pPart.editorial = notAllowed
model.pPart.editorial_alternation = notAllowed
model.pPart.editorial_sequence = empty
model.pPart.editorial_sequenceOptional = empty
model.pPart.editorial_sequenceOptionalRepeatable = empty
model.pPart.editorial_sequenceRepeatable = notAllowed
model.pPart.transcriptional = notAllowed
model.pPart.transcriptional_alternation = notAllowed
model.pPart.transcriptional_sequence = empty
model.pPart.transcriptional_sequenceOptional = empty
model.pPart.transcriptional_sequenceOptionalRepeatable = empty
model.pPart.transcriptional_sequenceRepeatable = notAllowed
model.placeNamePart = notAllowed
model.placeNamePart_alternation = notAllowed
model.placeNamePart_sequence = empty
model.placeNamePart_sequenceOptional = empty
model.placeNamePart_sequenceOptionalRepeatable = empty
model.placeNamePart_sequenceRepeatable = notAllowed
model.placeStateLike = model.placeNamePart
model.placeStateLike_alternation = model.placeNamePart_alternation
model.placeStateLike_sequence = model.placeNamePart_sequence
model.placeStateLike_sequenceOptional =
  model.placeNamePart_sequenceOptional?
model.placeStateLike_sequenceOptionalRepeatable =
  model.placeNamePart_sequenceOptionalRepeatable*
model.placeStateLike_sequenceRepeatable =
  model.placeNamePart_sequenceRepeatable+
model.quoteLike = notAllowed
model.quoteLike_alternation = notAllowed
model.quoteLike_sequence = empty
model.quoteLike_sequenceOptional = empty
model.quoteLike_sequenceOptionalRepeatable = empty
model.quoteLike_sequenceRepeatable = notAllowed
model.addressLike = notAllowed
model.addressLike_alternation = notAllowed
model.addressLike_sequence = empty
model.addressLike_sequenceOptional = empty
model.addressLike_sequenceOptionalRepeatable = empty
model.addressLike_sequenceRepeatable = notAllowed
model.nameLike =
  model.nameLike.agent | model.offsetLike | model.placeStateLike
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.offsetLike_alternation
  | model.placeStateLike_alternation
model.nameLike_sequence =
  model.nameLike.agent_sequence,
  model.offsetLike_sequence,
  model.placeStateLike_sequence
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.offsetLike_sequenceOptional?,
  model.placeStateLike_sequenceOptional?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.offsetLike_sequenceOptionalRepeatable*,
  model.placeStateLike_sequenceOptionalRepeatable*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.offsetLike_sequenceRepeatable+,
  model.placeStateLike_sequenceRepeatable+
Publisher =
  
  ## groups together all the Springer metadata associated to a book related publication (book or book chapter)
  element Publisher { IFIPentity*, PublisherInfo, Series }
IFIPentity =
  
  ## groups together all IFIP specific descriptors (TC, SC, etc.)
  element IFIPentity { (TC | WG | SIG)*, att.citing.attributes, empty }
TC =
  
  ## provides a technical committee number
  element TC { text }
WG =
  
  ## provides a working group number
  element WG {
    text,
    
    ##
    attribute sameAs { text }?,
    empty
  }
SIG =
  
  ## provides a SIG number
  element SIG { text }
PublisherInfo =
  
  ## basic publisher identification
  element PublisherInfo { PublisherName, PublisherLocation }
PublisherName =
  
  ## name of the publisher
  element PublisherName { text }
PublisherLocation =
  
  ## groups together all the Springer metadata associated to a book related publication (book or book chapter)
  element PublisherLocation { text }
Series =
  
  ## groups together all the Springer metadata associated to a book related publication (book or book chapter)
  element Series { SeriesInfo, Book }
SeriesInfo =
  
  ##
  element SeriesInfo {
    (SeriesID | SeriesPrintISSN | SeriesElectronicISSN | SeriesTitle)+,
    att.ID.attributes,
    empty
  }
SeriesID =
  
  ##
  element SeriesID { text }
SeriesPrintISSN =
  
  ##
  element SeriesPrintISSN { text }
SeriesElectronicISSN =
  
  ##
  element SeriesElectronicISSN { text }
SeriesTitle =
  
  ##
  element SeriesTitle { text, att.language.attributes, empty }
Book =
  
  ##
  element Book {
    (BookInfo, BookHeader, Chapter*), att.language.attributes, empty
  }
BookInfo =
  
  ##
  element BookInfo {
    (BookID?,
     BookTitle,
     BookSubTitle?,
     BookVolumeNumber?,
     BookDOI?,
     BookPrintISBN?,
     BookElectronicISBN?,
     BookChapterCount?,
     BookCopyright,
     BookContext?),
    att.language.attributes,
    att.numbered.attributes,
    
    ##
    attribute OutputMedium { text }?,
    empty
  }
BookHeader =
  
  ##
  element BookHeader { EditorGroup }
Chapter =
  
  ##
  element Chapter {
    (ChapterInfo, ChapterHeader, NoBody?, ChapterBackmatter?),
    att.language.attributes,
    att.ID.attributes,
    empty
  }
ChapterInfo =
  
  ##
  element ChapterInfo {
    (ChapterID?,
     ChapterDOI?,
     ChapterSequenceNumber?,
     ChapterTitle?,
     ChapterFirstPage?,
     ChapterLastPage?,
     ChapterCopyright?,
     ChapterContext?),
    att.numbered.attributes,
    
    ##
    attribute ChapterType { text }?,
    empty
  }
ChapterHeader =
  
  ##
  element ChapterHeader { AuthorGroup, Abstract, KeywordGroup }
NoBody =
  
  ##
  element NoBody { text }
BookID =
  
  ##
  element BookID { text }
BookTitle =
  
  ##
  element BookTitle { text }
BookSubTitle =
  
  ##
  element BookSubTitle { text }
BookVolumeNumber =
  
  ##
  element BookVolumeNumber { text }
BookDOI =
  
  ##
  element BookDOI { text }
BookPrintISBN =
  
  ##
  element BookPrintISBN { text }
BookElectronicISBN =
  
  ##
  element BookElectronicISBN { text }
BookChapterCount =
  
  ##
  element BookChapterCount { text }
BookCopyright =
  
  ##
  element BookCopyright { CopyrightHolderName, CopyrightYear }
CopyrightHolderName =
  
  ##
  element CopyrightHolderName {
    "IFIP International Federation for Information Processing"
  }
CopyrightYear =
  
  ##
  element CopyrightYear { text }
BookContext =
  
  ##
  element BookContext { SeriesID }
JournalTitle =
  
  ##
  element JournalTitle { text }
ArticleTitle =
  
  ##
  element ArticleTitle { text, att.language.attributes, empty }
AuthorGroup =
  
  ##
  element AuthorGroup { Author+, Affiliation* }
Author =
  
  ##
  element Author {
    (AuthorName, Contact?),
    
    ##
    attribute AffiliationIDS { text }?,
    empty
  }
AuthorName =
  
  ##
  element AuthorName { GivenName*, Initials*, FamilyName }
Abstract =
  
  ##
  element Abstract {
    (Heading?, Para*), att.language.attributes, att.ID.attributes, empty
  }
Para =
  
  ##
  element Para { text }
KeywordGroup =
  
  ##
  element KeywordGroup {
    (Heading?, Keyword+), att.language.attributes, empty
  }
Heading =
  
  ##
  element Heading { text }
Keyword =
  
  ##
  element Keyword { text }
EditorGroup =
  
  ##
  element EditorGroup { Editor+, Affiliation+ }
Editor =
  
  ##
  element Editor {
    (EditorName, Contact?),
    
    ##
    attribute AffiliationIDS { text }?,
    empty
  }
EditorName =
  
  ##
  element EditorName { GivenName*, Initials*, FamilyName }
GivenName =
  
  ##
  element GivenName { text }
Initials =
  
  ##
  element Initials { text }
FamilyName =
  
  ##
  element FamilyName { text }
Contact =
  
  ##
  element Contact { Email }
Email =
  
  ##
  element Email { text }
Affiliation =
  
  ##
  element Affiliation {
    (OrgDivision?, OrgName, OrgAddress?),
    
    ##
    attribute ID { text }?,
    empty
  }
OrgDivision =
  
  ##
  element OrgDivision { text }
OrgName =
  
  ##
  element OrgName { text }
OrgAddress =
  
  ##
  element OrgAddress {
    Street?, Postbox?, Postcode?, City?, State?, Country?
  }
Street =
  
  ##
  element Street { text }
Postbox =
  
  ##
  element Postbox { text }
Postcode =
  
  ##
  element Postcode { text }
City =
  
  ##
  element City { text }
State =
  
  ##
  element State { text }
Country =
  
  ##
  element Country { text }
ChapterID =
  
  ##
  element ChapterID { text }
ChapterDOI =
  
  ##
  element ChapterDOI { text }
ChapterSequenceNumber =
  
  ##
  element ChapterSequenceNumber { text }
ChapterTitle =
  
  ##
  element ChapterTitle { text, att.language.attributes, empty }
ChapterFirstPage =
  
  ##
  element ChapterFirstPage { text }
ChapterLastPage =
  
  ##
  element ChapterLastPage { text }
ChapterCopyright =
  
  ##
  element ChapterCopyright { CopyrightHolderName, CopyrightYear }
ChapterContext =
  
  ##
  element ChapterContext { SeriesID?, BookID?, BookTitle? }
ChapterBackmatter =
  
  ##
  element ChapterBackmatter { Bibliography? }
Bibliography =
  
  ##
  element Bibliography {
    (Heading?, Citation*), att.ID.attributes, empty
  }
Citation =
  
  ##
  element Citation {
    (CitationNumber?, (BibUnstructured | BibChapter | BibArticle)*),
    att.ID.attributes,
    empty
  }
CitationNumber =
  
  ##
  element CitationNumber { text }
BibUnstructured =
  
  ##
  element BibUnstructured {
    mixed { ExternalRef* }
  }
ExternalRef =
  
  ##
  element ExternalRef {
    (RefSource, RefTarget+), att.ID.attributes, empty
  }
RefSource =
  
  ##
  element RefSource {
    mixed { model.simpleText* }
  }
RefTarget =
  
  ##
  element RefTarget {
    text,
    
    ##
    attribute TargetType { text }?,
    
    ##
    attribute Address { text }?,
    empty
  }
BibChapter =
  
  ##
  element BibChapter {
    BibAuthorName*,
    (Year
     | ChapterTitle
     | BookTitle
     | PublisherName
     | PublisherLocation
     | SeriesTitle
     | BibEditorName
     | ConfEventName
     | ConfEventLocation
     | ConfEventDate
     | NumberInSeries
     | FirstPage
     | LastPage
     | BibComments
     | Eds)*
  }
BibArticle =
  
  ##
  element BibArticle {
    BibAuthorName*,
    (Year
     | ArticleTitle
     | JournalTitle
     | PublisherName
     | PublisherLocation
     | SeriesTitle
     | BibEditorName
     | ConfEventName
     | ConfEventLocation
     | ConfEventDate
     | NumberInSeries
     | FirstPage
     | LastPage
     | VolumeID
     | IssueID
     | BibComments
     | Eds)*
  }
VolumeID =
  
  ##
  element VolumeID { text }
IssueID =
  
  ##
  element IssueID { text }
BibAuthorName =
  
  ##
  element BibAuthorName { GivenName*, Initials*, FamilyName }
BibEditorName =
  
  ##
  element BibEditorName { GivenName*, Initials*, FamilyName }
Year =
  
  ##
  element Year { text }
ConfEventName =
  
  ##
  element ConfEventName { text }
ConfEventLocation =
  
  ##
  element ConfEventLocation { text }
ConfEventDate =
  
  ##
  element ConfEventDate { text }
NumberInSeries =
  
  ##
  element NumberInSeries { text }
FirstPage =
  
  ##
  element FirstPage { text }
LastPage =
  
  ##
  element LastPage { text }
BibComments =
  
  ##
  element BibComments { text }
Eds =
  
  ##
  element Eds { empty }
att.ID.attributes = att.ID.attribute.ID
att.ID.attribute.ID =
  
  ##
  attribute ID { text }?
att.language.attributes = att.language.attribute.Language
att.language.attribute.Language =
  
  ## characterizes the working language of the content of the element
  attribute Language { text }
att.numbered.attributes =
  att.numbered.attribute.NumberingStyle,
  att.numbered.attribute.NumberingDepth
att.numbered.attribute.NumberingStyle =
  
  ##
  attribute NumberingStyle { text }?
att.numbered.attribute.NumberingDepth =
  
  ##
  attribute NumberingDepth { text }?
model.simpleText = Superscript | Subscript | Stack | Emphasis
Superscript =
  
  ##
  element Superscript { text }
Subscript =
  
  ##
  element Subscript { text }
Stack =
  
  ##
  element Stack { text }
Emphasis =
  
  ##
  element Emphasis {
    text,
    
    ##
    attribute FontCategory { text }?,
    empty
  }
start = Publisher
